service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v0.0.0
        title: Todo API
        description: Serverless application for manging todos
    models:
      - name: TodoCreateRequest
        contentType: application/json
        schema: ${file(src/todos/validators/create-request.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(src/todos/validators/update-request.json)}

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: 'Todos-${self:provider.stage}'
    TODO_GLOBAL_SECONDARY_INDEX_NAME: 'user_id_index'
    TODO_ATTACHMENTS_S3_BUCKET: 'todo-attachments-bucket-${self:provider.stage}'
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/auth/lambdas/auth0-authorizer.handler
    environment:
      - AUTH0_JWKS_ENDPOINT: 'https://dev-dl7xpde6.us.auth0.com/.well-known/jwks.json'

  # TODO: Configure this function
  GetTodos:
    handler: src/todos/lambdas/list.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODO_GLOBAL_SECONDARY_INDEX_NAME}
    events:
      - http:
          method: get
          path: todos

  # TODO: Configure this function
  CreateTodo:
    handler: src/todos/lambdas/create.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: post
          path: todos
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoCreateRequest

  # TODO: Configure this function
  UpdateTodo:
    handler: src/todos/lambdas/update.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    events:
      - http:
          method: patch
          path: todos/{todoId}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo
            description: Update a new todo
            requestModels:
              'application/json': TodoUpdateRequest

  # TODO: Configure this function
  DeleteTodo:
    handler: src/todos/lambdas/delete.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/stream/
    events:
      - http:
          method: delete
          path: todos/{todoId}

  RemoveAttachment:
    handler: src/dynamodb/lambdas/remove-attachment.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - S3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:GetRecords
        Resource: !GetAtt TodosTable.StreamArn

    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TodosTable.StreamArn

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/todo-attachments/lambdas/generate-upload-url.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
          - AttributeName: title
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        StreamSpecification:
          StreamViewType: OLD_IMAGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_GLOBAL_SECONDARY_INDEX_NAME}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodoAttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    TodoAttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: TodoAttachmentsBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}/*'
            - Sid: PutImagesOnlyBucket
              Effect: Allow
              Principal: '*'
              Ation: 's3:PutObject'
              Resource:
                - 'arn:aws:s3:::${self:provider.environment.TODO_ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref TodoAttachmentsBucket